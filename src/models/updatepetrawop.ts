/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64";
import { Pet, Pet$ } from "./pet";
import * as z from "zod";

export type UpdatePetRawResponse = {
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Successful operation
     */
    pet?: Pet | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdatePetRawResponse$ {
    export const inboundSchema: z.ZodType<UpdatePetRawResponse, z.ZodTypeDef, unknown> = z
        .object({
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            Pet: Pet$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                ...(v.Pet === undefined ? null : { pet: v.Pet }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        Body?: Uint8Array | undefined;
        ContentType: string;
        Pet?: Pet$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePetRawResponse> = z
        .object({
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            pet: Pet$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                ...(v.pet === undefined ? null : { Pet: v.pet }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
