/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64";
import { Pet, Pet$ } from "./pet";
import * as z from "zod";

/**
 * Status values that need to be considered for filter
 */
export enum QueryParamStatus {
    Available = "available",
    Pending = "pending",
    Sold = "sold",
}

export type FindPetsByStatusRequest = {
    /**
     * Status values that need to be considered for filter
     */
    status?: QueryParamStatus | undefined;
};

export type FindPetsByStatusResponse = {
    /**
     * successful operation
     */
    twoHundredApplicationJsonClasses?: Array<Pet> | undefined;
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace QueryParamStatus$ {
    export const inboundSchema = z.nativeEnum(QueryParamStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FindPetsByStatusRequest$ {
    export const inboundSchema: z.ZodType<FindPetsByStatusRequest, z.ZodTypeDef, unknown> = z
        .object({
            status: QueryParamStatus$.inboundSchema.default(QueryParamStatus.Available),
        })
        .transform((v) => {
            return {
                status: v.status,
            };
        });

    export type Outbound = {
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FindPetsByStatusRequest> = z
        .object({
            status: QueryParamStatus$.outboundSchema.default(QueryParamStatus.Available),
        })
        .transform((v) => {
            return {
                status: v.status,
            };
        });
}

/** @internal */
export namespace FindPetsByStatusResponse$ {
    export const inboundSchema: z.ZodType<FindPetsByStatusResponse, z.ZodTypeDef, unknown> = z
        .object({
            "200_application/json_classes": z.array(Pet$.inboundSchema).optional(),
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v["200_application/json_classes"] === undefined
                    ? null
                    : { twoHundredApplicationJsonClasses: v["200_application/json_classes"] }),
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        "200_application/json_classes"?: Array<Pet$.Outbound> | undefined;
        Body?: Uint8Array | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FindPetsByStatusResponse> = z
        .object({
            twoHundredApplicationJsonClasses: z.array(Pet$.outboundSchema).optional(),
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.twoHundredApplicationJsonClasses === undefined
                    ? null
                    : { "200_application/json_classes": v.twoHundredApplicationJsonClasses }),
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
