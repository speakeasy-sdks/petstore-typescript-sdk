/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { User, User$ } from "./user";
import * as z from "zod";

export type UpdateUserJsonRequest = {
    /**
     * name that needs to be updated
     */
    username: string;
    /**
     * Update an existent user in the store
     */
    user?: User | undefined;
};

export type UpdateUserJsonResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateUserJsonRequest$ {
    export const inboundSchema: z.ZodType<UpdateUserJsonRequest, z.ZodTypeDef, unknown> = z
        .object({
            username: z.string(),
            User: User$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                username: v.username,
                ...(v.User === undefined ? null : { user: v.User }),
            };
        });

    export type Outbound = {
        username: string;
        User?: User$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateUserJsonRequest> = z
        .object({
            username: z.string(),
            user: User$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                username: v.username,
                ...(v.user === undefined ? null : { User: v.user }),
            };
        });
}

/** @internal */
export namespace UpdateUserJsonResponse$ {
    export const inboundSchema: z.ZodType<UpdateUserJsonResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateUserJsonResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
