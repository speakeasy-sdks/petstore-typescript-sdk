/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type User = {
    email?: string | undefined;
    firstName?: string | undefined;
    id?: number | undefined;
    lastName?: string | undefined;
    password?: string | undefined;
    phone?: string | undefined;
    /**
     * User Status
     */
    userStatus?: number | undefined;
    username?: string | undefined;
};

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
        .object({
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.number().int().optional(),
            lastName: z.string().optional(),
            password: z.string().optional(),
            phone: z.string().optional(),
            userStatus: z.number().int().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.userStatus === undefined ? null : { userStatus: v.userStatus }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        firstName?: string | undefined;
        id?: number | undefined;
        lastName?: string | undefined;
        password?: string | undefined;
        phone?: string | undefined;
        userStatus?: number | undefined;
        username?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            email: z.string().optional(),
            firstName: z.string().optional(),
            id: z.number().int().optional(),
            lastName: z.string().optional(),
            password: z.string().optional(),
            phone: z.string().optional(),
            userStatus: z.number().int().optional(),
            username: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.userStatus === undefined ? null : { userStatus: v.userStatus }),
                ...(v.username === undefined ? null : { username: v.username }),
            };
        });
}
