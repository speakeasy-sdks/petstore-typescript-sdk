/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Category, Category$ } from "./category";
import { Tag, Tag$ } from "./tag";
import * as z from "zod";

/**
 * pet status in the store
 */
export enum PetStatus {
    Available = "available",
    Pending = "pending",
    Sold = "sold",
}

export type Pet = {
    category?: Category | undefined;
    id?: number | undefined;
    name: string;
    photoUrls: Array<string>;
    /**
     * pet status in the store
     */
    status?: PetStatus | undefined;
    tags?: Array<Tag> | undefined;
};

/** @internal */
export namespace PetStatus$ {
    export const inboundSchema = z.nativeEnum(PetStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Pet$ {
    export const inboundSchema: z.ZodType<Pet, z.ZodTypeDef, unknown> = z
        .object({
            category: Category$.inboundSchema.optional(),
            id: z.number().int().optional(),
            name: z.string(),
            photoUrls: z.array(z.string()),
            status: PetStatus$.inboundSchema.optional(),
            tags: z.array(Tag$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                photoUrls: v.photoUrls,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        category?: Category$.Outbound | undefined;
        id?: number | undefined;
        name: string;
        photoUrls: Array<string>;
        status?: string | undefined;
        tags?: Array<Tag$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pet> = z
        .object({
            category: Category$.outboundSchema.optional(),
            id: z.number().int().optional(),
            name: z.string(),
            photoUrls: z.array(z.string()),
            status: PetStatus$.outboundSchema.optional(),
            tags: z.array(Tag$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                photoUrls: v.photoUrls,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}
