/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64";
import { ApiResponse, ApiResponse$ } from "./apiresponse";
import * as z from "zod";

export type UploadFileRequest = {
    /**
     * ID of pet to update
     */
    petId: number;
    /**
     * Additional Metadata
     */
    additionalMetadata?: string | undefined;
    requestBody?: Uint8Array | string | undefined;
};

export type UploadFileResponse = {
    /**
     * successful operation
     */
    apiResponse?: ApiResponse | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UploadFileRequest$ {
    export const inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            petId: z.number().int(),
            additionalMetadata: z.string().optional(),
            RequestBody: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return {
                petId: v.petId,
                ...(v.additionalMetadata === undefined
                    ? null
                    : { additionalMetadata: v.additionalMetadata }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        petId: number;
        additionalMetadata?: string | undefined;
        RequestBody?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileRequest> = z
        .object({
            petId: z.number().int(),
            additionalMetadata: z.string().optional(),
            requestBody: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return {
                petId: v.petId,
                ...(v.additionalMetadata === undefined
                    ? null
                    : { additionalMetadata: v.additionalMetadata }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UploadFileResponse$ {
    export const inboundSchema: z.ZodType<UploadFileResponse, z.ZodTypeDef, unknown> = z
        .object({
            ApiResponse: ApiResponse$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                ...(v.ApiResponse === undefined ? null : { apiResponse: v.ApiResponse }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ApiResponse?: ApiResponse$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponse> = z
        .object({
            apiResponse: ApiResponse$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ...(v.apiResponse === undefined ? null : { ApiResponse: v.apiResponse }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
