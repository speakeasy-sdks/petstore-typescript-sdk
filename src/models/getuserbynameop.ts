/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64";
import { User, User$ } from "./user";
import * as z from "zod";

export type GetUserByNameRequest = {
    /**
     * The name that needs to be fetched. Use user1 for testing.
     */
    username: string;
};

export type GetUserByNameResponse = {
    body?: Uint8Array | string | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * successful operation
     */
    user?: User | undefined;
};

/** @internal */
export namespace GetUserByNameRequest$ {
    export const inboundSchema: z.ZodType<GetUserByNameRequest, z.ZodTypeDef, unknown> = z
        .object({
            username: z.string(),
        })
        .transform((v) => {
            return {
                username: v.username,
            };
        });

    export type Outbound = {
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUserByNameRequest> = z
        .object({
            username: z.string(),
        })
        .transform((v) => {
            return {
                username: v.username,
            };
        });
}

/** @internal */
export namespace GetUserByNameResponse$ {
    export const inboundSchema: z.ZodType<GetUserByNameResponse, z.ZodTypeDef, unknown> = z
        .object({
            Body: b64$.zodInbound.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            User: User$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.Body === undefined ? null : { body: v.Body }),
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.User === undefined ? null : { user: v.User }),
            };
        });

    export type Outbound = {
        Body?: Uint8Array | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        User?: User$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUserByNameResponse> = z
        .object({
            body: b64$.zodOutbound.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            user: User$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.body === undefined ? null : { Body: v.body }),
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.user === undefined ? null : { User: v.user }),
            };
        });
}
