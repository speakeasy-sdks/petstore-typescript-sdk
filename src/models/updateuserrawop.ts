/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../lib/base64";
import * as z from "zod";

export type UpdateUserRawRequest = {
    /**
     * name that needs to be updated
     */
    username: string;
    /**
     * Update an existent user in the store
     */
    requestBody?: Uint8Array | string | undefined;
};

export type UpdateUserRawResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateUserRawRequest$ {
    export const inboundSchema: z.ZodType<UpdateUserRawRequest, z.ZodTypeDef, unknown> = z
        .object({
            username: z.string(),
            RequestBody: b64$.zodInbound.optional(),
        })
        .transform((v) => {
            return {
                username: v.username,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        username: string;
        RequestBody?: Uint8Array | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateUserRawRequest> = z
        .object({
            username: z.string(),
            requestBody: b64$.zodOutbound.optional(),
        })
        .transform((v) => {
            return {
                username: v.username,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UpdateUserRawResponse$ {
    export const inboundSchema: z.ZodType<UpdateUserRawResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateUserRawResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
