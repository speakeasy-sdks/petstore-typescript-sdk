/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Order Status
 */
export enum Status {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered",
}

export type Order = {
    complete?: boolean | undefined;
    id?: number | undefined;
    petId?: number | undefined;
    quantity?: number | undefined;
    shipDate?: Date | undefined;
    /**
     * Order Status
     */
    status?: Status | undefined;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Order$ {
    export const inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
        .object({
            complete: z.boolean().optional(),
            id: z.number().int().optional(),
            petId: z.number().int().optional(),
            quantity: z.number().int().optional(),
            shipDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: Status$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.complete === undefined ? null : { complete: v.complete }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.petId === undefined ? null : { petId: v.petId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.shipDate === undefined ? null : { shipDate: v.shipDate }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        complete?: boolean | undefined;
        id?: number | undefined;
        petId?: number | undefined;
        quantity?: number | undefined;
        shipDate?: string | undefined;
        status?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Order> = z
        .object({
            complete: z.boolean().optional(),
            id: z.number().int().optional(),
            petId: z.number().int().optional(),
            quantity: z.number().int().optional(),
            shipDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: Status$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.complete === undefined ? null : { complete: v.complete }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.petId === undefined ? null : { petId: v.petId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.shipDate === undefined ? null : { shipDate: v.shipDate }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
