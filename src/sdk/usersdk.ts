/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import * as b64$ from "../lib/base64";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";
import * as z from "zod";

export enum CreateUserFormAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum CreateUserJsonAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum CreateUserRawAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum CreateUsersWithListInputAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum GetUserByNameAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum LoginUserAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export class UserSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async createUserForm(
        request?: models.User | undefined,
        options?: RequestOptions & { acceptHeaderOverride?: CreateUserFormAcceptEnum }
    ): Promise<models.CreateUserFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/x-www-form-urlencoded");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.User$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ = Object.entries(payload$ || {})
            .map(([k, v]) => {
                return enc$.encodeBodyForm(k, v, { charEncoding: "percent" });
            })
            .join("&");

        const path$ = this.templateURLComponent("/user")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createUser_form",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.CreateUserFormResponse>()
            .void("2XX", models.CreateUserFormResponse$)
            .fail(["4XX", "5XX"])
            .json("default", models.CreateUserFormResponse$, { key: "User" })
            .bytes("default", models.CreateUserFormResponse$, {
                ctype: "application/xml",
                key: "Body",
            })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async createUserJson(
        request?: models.User | undefined,
        options?: RequestOptions & { acceptHeaderOverride?: CreateUserJsonAcceptEnum }
    ): Promise<models.CreateUserJsonResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.User$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/user")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createUser_json",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.CreateUserJsonResponse>()
            .void("2XX", models.CreateUserJsonResponse$)
            .fail(["4XX", "5XX"])
            .json("default", models.CreateUserJsonResponse$, { key: "User" })
            .bytes("default", models.CreateUserJsonResponse$, {
                ctype: "application/xml",
                key: "Body",
            })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Create user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async createUserRaw(
        request?: Uint8Array | string | undefined,
        options?: RequestOptions & { acceptHeaderOverride?: CreateUserRawAcceptEnum }
    ): Promise<models.CreateUserRawResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/xml");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.optional().parse(value$),
            "Input validation failed"
        );
        const body$ = payload$ === undefined ? null : payload$;

        const path$ = this.templateURLComponent("/user")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createUser_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.CreateUserRawResponse>()
            .void("2XX", models.CreateUserRawResponse$)
            .fail(["4XX", "5XX"])
            .json("default", models.CreateUserRawResponse$, { key: "User" })
            .bytes("default", models.CreateUserRawResponse$, {
                ctype: "application/xml",
                key: "Body",
            })
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Creates list of users with given input array
     *
     * @remarks
     * Creates list of users with given input array
     */
    async createUsersWithListInput(
        request?: Array<models.User> | undefined,
        options?: RequestOptions & { acceptHeaderOverride?: CreateUsersWithListInputAcceptEnum }
    ): Promise<models.CreateUsersWithListInputResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => z.array(models.User$.outboundSchema).optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/user/createWithList")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "createUsersWithListInput",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.CreateUsersWithListInputResponse>()
            .json(200, models.CreateUsersWithListInputResponse$, { key: "User" })
            .bytes(200, models.CreateUsersWithListInputResponse$, {
                ctype: "application/xml",
                key: "Body",
            })
            .fail(["4XX", "5XX"])
            .void("default", models.CreateUsersWithListInputResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Delete user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async deleteUser(
        request: models.DeleteUserRequest,
        options?: RequestOptions
    ): Promise<models.DeleteUserResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DeleteUserRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            username: enc$.encodeSimple("username", payload$.username, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/user/{username}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteUser",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.DeleteUserResponse>()
            .void("2XX", models.DeleteUserResponse$)
            .fail([400, 404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Get user by user name
     */
    async getUserByName(
        request: models.GetUserByNameRequest,
        options?: RequestOptions & { acceptHeaderOverride?: GetUserByNameAcceptEnum }
    ): Promise<models.GetUserByNameResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetUserByNameRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            username: enc$.encodeSimple("username", payload$.username, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/user/{username}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getUserByName",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.GetUserByNameResponse>()
            .json(200, models.GetUserByNameResponse$, { key: "User" })
            .bytes(200, models.GetUserByNameResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Logs user into the system
     */
    async loginUser(
        request: models.LoginUserRequest,
        options?: RequestOptions & { acceptHeaderOverride?: LoginUserAcceptEnum }
    ): Promise<models.LoginUserResponse> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.LoginUserRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/user/login")();

        const query$ = [
            enc$.encodeForm("password", payload$.password, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("username", payload$.username, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "loginUser",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.LoginUserResponse>()
            .json(200, models.LoginUserResponse$, { hdrs: true, key: "string" })
            .text(200, models.LoginUserResponse$, {
                ctype: "application/xml",
                hdrs: true,
                key: "res",
            })
            .fail([400, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Logs out current logged in user session
     */
    async logoutUser(options?: RequestOptions): Promise<models.LogoutUserResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const path$ = this.templateURLComponent("/user/logout")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "logoutUser",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.LogoutUserResponse>()
            .fail(["4XX", "5XX"])
            .void(["2XX", "default"], models.LogoutUserResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async updateUserForm(
        request: models.UpdateUserFormRequest,
        options?: RequestOptions
    ): Promise<models.UpdateUserFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/x-www-form-urlencoded");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateUserFormRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = Object.entries(payload$.User || {})
            .map(([k, v]) => {
                return enc$.encodeBodyForm(k, v, { charEncoding: "percent" });
            })
            .join("&");

        const pathParams$ = {
            username: enc$.encodeSimple("username", payload$.username, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/user/{username}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateUser_form",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdateUserFormResponse>()
            .fail(["4XX", "5XX"])
            .void(["2XX", "default"], models.UpdateUserFormResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async updateUserJson(
        request: models.UpdateUserJsonRequest,
        options?: RequestOptions
    ): Promise<models.UpdateUserJsonResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateUserJsonRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$.User, { explode: true });

        const pathParams$ = {
            username: enc$.encodeSimple("username", payload$.username, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/user/{username}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateUser_json",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdateUserJsonResponse>()
            .fail(["4XX", "5XX"])
            .void(["2XX", "default"], models.UpdateUserJsonResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update user
     *
     * @remarks
     * This can only be done by the logged in user.
     */
    async updateUserRaw(
        request: models.UpdateUserRawRequest,
        options?: RequestOptions
    ): Promise<models.UpdateUserRawResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/xml");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateUserRawRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$.RequestBody;

        const pathParams$ = {
            username: enc$.encodeSimple("username", payload$.username, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/user/{username}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updateUser_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdateUserRawResponse>()
            .fail(["4XX", "5XX"])
            .void(["2XX", "default"], models.UpdateUserRawResponse$)
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
