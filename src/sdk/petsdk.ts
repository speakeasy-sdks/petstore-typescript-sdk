/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import * as b64$ from "../lib/base64";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import * as models from "../models";

export enum AddPetFormAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum AddPetJsonAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum AddPetRawAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum FindPetsByStatusAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum FindPetsByTagsAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum GetPetByIdAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum UpdatePetFormAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum UpdatePetJsonAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export enum UpdatePetRawAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export class PetSDK extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Add a new pet to the store
     *
     * @remarks
     * Add a new pet to the store
     */
    async addPetForm(
        request: models.Pet,
        options?: RequestOptions & { acceptHeaderOverride?: AddPetFormAcceptEnum }
    ): Promise<models.AddPetFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/x-www-form-urlencoded");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Pet$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = Object.entries(payload$ || {})
            .map(([k, v]) => {
                return enc$.encodeBodyForm(k, v, { charEncoding: "percent" });
            })
            .join("&");

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addPet_form",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.AddPetFormResponse>()
            .json(200, models.AddPetFormResponse$, { key: "Pet" })
            .bytes(200, models.AddPetFormResponse$, { ctype: "application/xml", key: "Body" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add a new pet to the store
     *
     * @remarks
     * Add a new pet to the store
     */
    async addPetJson(
        request: models.Pet,
        options?: RequestOptions & { acceptHeaderOverride?: AddPetJsonAcceptEnum }
    ): Promise<models.AddPetJsonResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Pet$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addPet_json",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.AddPetJsonResponse>()
            .json(200, models.AddPetJsonResponse$, { key: "Pet" })
            .bytes(200, models.AddPetJsonResponse$, { ctype: "application/xml", key: "Body" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Add a new pet to the store
     *
     * @remarks
     * Add a new pet to the store
     */
    async addPetRaw(
        request: Uint8Array | string,
        options?: RequestOptions & { acceptHeaderOverride?: AddPetRawAcceptEnum }
    ): Promise<models.AddPetRawResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/xml");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$;

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "addPet_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.AddPetRawResponse>()
            .json(200, models.AddPetRawResponse$, { key: "Pet" })
            .bytes(200, models.AddPetRawResponse$, { ctype: "application/xml", key: "Body" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Deletes a pet
     */
    async deletePet(
        request: models.DeletePetRequest,
        options?: RequestOptions
    ): Promise<models.DeletePetResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DeletePetRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            petId: enc$.encodeSimple("petId", payload$.petId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/pet/{petId}")(pathParams$);

        const query$ = "";

        headers$.set(
            "api_key",
            enc$.encodeSimple("api_key", payload$.api_key, { explode: false, charEncoding: "none" })
        );

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deletePet",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.DeletePetResponse>()
            .void("2XX", models.DeletePetResponse$)
            .fail([400, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Finds Pets by status
     *
     * @remarks
     * Multiple status values can be provided with comma separated strings
     */
    async findPetsByStatus(
        request: models.FindPetsByStatusRequest,
        options?: RequestOptions & { acceptHeaderOverride?: FindPetsByStatusAcceptEnum }
    ): Promise<models.FindPetsByStatusResponse> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.FindPetsByStatusRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/pet/findByStatus")();

        const query$ = [
            enc$.encodeForm("status", payload$.status, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "findPetsByStatus",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.FindPetsByStatusResponse>()
            .json(200, models.FindPetsByStatusResponse$, { key: "200_application/json_classes" })
            .bytes(200, models.FindPetsByStatusResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Finds Pets by tags
     *
     * @remarks
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    async findPetsByTags(
        request: models.FindPetsByTagsRequest,
        options?: RequestOptions & { acceptHeaderOverride?: FindPetsByTagsAcceptEnum }
    ): Promise<models.FindPetsByTagsResponse> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.FindPetsByTagsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/pet/findByTags")();

        const query$ = [
            enc$.encodeForm("tags", payload$.tags, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "findPetsByTags",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.FindPetsByTagsResponse>()
            .json(200, models.FindPetsByTagsResponse$, { key: "200_application/json_classes" })
            .bytes(200, models.FindPetsByTagsResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Find pet by ID
     *
     * @remarks
     * Returns a single pet
     */
    async getPetById(
        request: models.GetPetByIdRequest,
        security: models.GetPetByIdSecurity,
        options?: RequestOptions & { acceptHeaderOverride?: GetPetByIdAcceptEnum }
    ): Promise<models.GetPetByIdResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetPetByIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            petId: enc$.encodeSimple("petId", payload$.petId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/pet/{petId}")(pathParams$);

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "api_key",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
            [
                {
                    fieldName: "Authorization",
                    type: "oauth2",
                    value: security?.petstoreAuth,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = { operationID: "getPetById", oAuth2Scopes: [], securitySource: security$ };

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.GetPetByIdResponse>()
            .json(200, models.GetPetByIdResponse$, { key: "Pet" })
            .bytes(200, models.GetPetByIdResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Updates a pet in the store with form data
     */
    async updatePetWithForm(
        request: models.UpdatePetWithFormRequest,
        options?: RequestOptions
    ): Promise<models.UpdatePetWithFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdatePetWithFormRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            petId: enc$.encodeSimple("petId", payload$.petId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/pet/{petId}")(pathParams$);

        const query$ = [
            enc$.encodeForm("name", payload$.name, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("status", payload$.status, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updatePetWithForm",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdatePetWithFormResponse>()
            .void("2XX", models.UpdatePetWithFormResponse$)
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update an existing pet
     *
     * @remarks
     * Update an existing pet by Id
     */
    async updatePetForm(
        request: models.Pet,
        options?: RequestOptions & { acceptHeaderOverride?: UpdatePetFormAcceptEnum }
    ): Promise<models.UpdatePetFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/x-www-form-urlencoded");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Pet$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = Object.entries(payload$ || {})
            .map(([k, v]) => {
                return enc$.encodeBodyForm(k, v, { charEncoding: "percent" });
            })
            .join("&");

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updatePet_form",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdatePetFormResponse>()
            .json(200, models.UpdatePetFormResponse$, { key: "Pet" })
            .bytes(200, models.UpdatePetFormResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, 405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update an existing pet
     *
     * @remarks
     * Update an existing pet by Id
     */
    async updatePetJson(
        request: models.Pet,
        options?: RequestOptions & { acceptHeaderOverride?: UpdatePetJsonAcceptEnum }
    ): Promise<models.UpdatePetJsonResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Pet$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updatePet_json",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdatePetJsonResponse>()
            .json(200, models.UpdatePetJsonResponse$, { key: "Pet" })
            .bytes(200, models.UpdatePetJsonResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, 405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update an existing pet
     *
     * @remarks
     * Update an existing pet by Id
     */
    async updatePetRaw(
        request: Uint8Array | string,
        options?: RequestOptions & { acceptHeaderOverride?: UpdatePetRawAcceptEnum }
    ): Promise<models.UpdatePetRawResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/xml");

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$;

        const path$ = this.templateURLComponent("/pet")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "updatePet_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UpdatePetRawResponse>()
            .json(200, models.UpdatePetRawResponse$, { key: "Pet" })
            .bytes(200, models.UpdatePetRawResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, 405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * uploads an image
     */
    async uploadFile(
        request: models.UploadFileRequest,
        options?: RequestOptions
    ): Promise<models.UploadFileResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/octet-stream");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UploadFileRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$.RequestBody;

        const pathParams$ = {
            petId: enc$.encodeSimple("petId", payload$.petId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/pet/{petId}/uploadImage")(pathParams$);

        const query$ = [
            enc$.encodeForm("additionalMetadata", payload$.additionalMetadata, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "uploadFile",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.UploadFileResponse>()
            .json(200, models.UploadFileResponse$, { key: "ApiResponse" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
