/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import * as b64$ from "../lib/base64";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import { SecurityInput } from "../lib/security";
import * as models from "../models";

export enum GetOrderByIdAcceptEnum {
    applicationJson = "application/json",
    applicationXml = "application/xml",
}

export class Store extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Delete purchase order by ID
     *
     * @remarks
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     */
    async deleteOrder(
        request: models.DeleteOrderRequest,
        options?: RequestOptions
    ): Promise<models.DeleteOrderResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DeleteOrderRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            orderId: enc$.encodeSimple("orderId", payload$.orderId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/store/order/{orderId}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "deleteOrder",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.DeleteOrderResponse>()
            .void("2XX", models.DeleteOrderResponse$)
            .fail([400, 404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Returns pet inventories by status
     *
     * @remarks
     * Returns a map of status codes to quantities
     */
    async getInventory(
        security: models.GetInventorySecurity,
        options?: RequestOptions
    ): Promise<models.GetInventoryResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/store/inventory")();

        const query$ = "";

        const security$: SecurityInput[][] = [
            [
                {
                    fieldName: "api_key",
                    type: "apiKey:header",
                    value: security?.apiKey,
                },
            ],
        ];
        const securitySettings$ = this.resolveSecurity(...security$);
        const context = {
            operationID: "getInventory",
            oAuth2Scopes: [],
            securitySource: security$,
        };

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.GetInventoryResponse>()
            .json(200, models.GetInventoryResponse$, { key: "object" })
            .fail(["4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Find purchase order by ID
     *
     * @remarks
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     */
    async getOrderById(
        request: models.GetOrderByIdRequest,
        options?: RequestOptions & { acceptHeaderOverride?: GetOrderByIdAcceptEnum }
    ): Promise<models.GetOrderByIdResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);

        const accept = options?.acceptHeaderOverride || "application/json;q=1, application/xml;q=0";
        headers$.set("Accept", accept);

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetOrderByIdRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            orderId: enc$.encodeSimple("orderId", payload$.orderId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/store/order/{orderId}")(pathParams$);

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "getOrderById",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.GetOrderByIdResponse>()
            .json(200, models.GetOrderByIdResponse$, { key: "Order" })
            .bytes(200, models.GetOrderByIdResponse$, { ctype: "application/xml", key: "Body" })
            .fail([400, 404, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Place an order for a pet
     *
     * @remarks
     * Place a new order in the store
     */
    async placeOrderForm(
        request?: models.Order | undefined,
        options?: RequestOptions
    ): Promise<models.PlaceOrderFormResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/x-www-form-urlencoded");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Order$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ = Object.entries(payload$ || {})
            .map(([k, v]) => {
                return enc$.encodeBodyForm(k, v, { charEncoding: "percent" });
            })
            .join("&");

        const path$ = this.templateURLComponent("/store/order")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "placeOrder_form",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.PlaceOrderFormResponse>()
            .json(200, models.PlaceOrderFormResponse$, { key: "Order" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Place an order for a pet
     *
     * @remarks
     * Place a new order in the store
     */
    async placeOrderJson(
        request?: models.Order | undefined,
        options?: RequestOptions
    ): Promise<models.PlaceOrderJsonResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.Order$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/store/order")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "placeOrder_json",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.PlaceOrderJsonResponse>()
            .json(200, models.PlaceOrderJsonResponse$, { key: "Order" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Place an order for a pet
     *
     * @remarks
     * Place a new order in the store
     */
    async placeOrderRaw(
        request?: Uint8Array | string | undefined,
        options?: RequestOptions
    ): Promise<models.PlaceOrderRawResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/xml");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.optional().parse(value$),
            "Input validation failed"
        );
        const body$ = payload$ === undefined ? null : payload$;

        const path$ = this.templateURLComponent("/store/order")();

        const query$ = "";

        let security$;
        if (typeof this.options$.petstoreAuth === "function") {
            security$ = { petstoreAuth: await this.options$.petstoreAuth() };
        } else if (this.options$.petstoreAuth) {
            security$ = { petstoreAuth: this.options$.petstoreAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "placeOrder_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.petstoreAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["405", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await this.matcher<models.PlaceOrderRawResponse>()
            .json(200, models.PlaceOrderRawResponse$, { key: "Order" })
            .fail([405, "4XX", "5XX"])
            .match(response, { extraFields: responseFields$ });

        return result$;
    }
}
